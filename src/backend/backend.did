type NewPerson = record { occupation : text; name : text; email : text };
type NewTodo = record { done : bool; "text" : text; person_id : nat32 };
type Person = record {
  id : nat32;
  occupation : text;
  name : text;
  email : text;
};
type Todo = record {
  id : nat32;
  done : bool;
  "text" : text;
  person_id : nat32;
};
type QueryPersons = record { offset : nat32; limit : nat32 };

type ResultPerson = variant { Ok : Person; Err : text };
type ResultTodo = variant { Ok : Todo; Err : text };
type ResultVecPerson = variant { Ok : vec Person; Err : text };
type ResultVecTodo = variant { Ok : vec Todo; Err : text };

type SelectTodo = record { person_id : nat32 };
type UpdateTodo = record { id : nat32; done : bool; "text" : text };
service : () -> {
  delete_person : (nat32) -> (ResultPerson);
  get_person : (nat32) -> (ResultPerson);
  delete_todo : (nat32) -> (ResultTodo);
  get_persons : () -> (ResultVecPerson);
  list_persons : (QueryPersons) -> (ResultVecPerson);
  list_todos : (SelectTodo) -> (ResultVecTodo);
  new_person : (person: NewPerson) -> (ResultPerson);
  new_todo : (NewTodo) -> (ResultTodo);
  update_person : (Person) -> (ResultPerson);
  update_todo : (UpdateTodo) -> (ResultTodo);
  reset_base: () -> ();
}
